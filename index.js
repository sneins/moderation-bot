// moderation-bot/index.js
const { Client, GatewayIntentBits, SlashCommandBuilder, Collection, REST, Routes, PermissionsBitField } = require('discord.js');
require('dotenv').config();

const client = new Client({ intents: [
  GatewayIntentBits.Guilds,
  GatewayIntentBits.GuildMessages,
  GatewayIntentBits.MessageContent,
  GatewayIntentBits.GuildMembers
] });

const punishmentsChannelId = process.env.LOG_CHANNEL_ID;
const warningLimit = 4;

const warnings = new Map();    // userId => count –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π
const blacklist = new Set();   // userId –≤ —á–µ—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ
const bans = new Map();        // userId => timestamp –æ–∫–æ–Ω—á–∞–Ω–∏—è –±–∞–Ω–∞
const mutes = new Map();       // userId => timestamp –æ–∫–æ–Ω—á–∞–Ω–∏—è –º—É—Ç–∞
const savedRoles = new Map();  // userId => [roleId]

const commands = [
  new SlashCommandBuilder().setName('ban').setDescription('–ó–∞–±–∞–Ω–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞')
    .addUserOption(opt => opt.setName('–Ω–∏–∫').setDescription('–£—á–∞—Å—Ç–Ω–∏–∫').setRequired(true))
    .addStringOption(opt => opt.setName('–ø—Ä–∏—á–∏–Ω–∞').setDescription('–ü—Ä–∏—á–∏–Ω–∞').setRequired(true))
    .addIntegerOption(opt => opt.setName('–≤—Ä–µ–º—è').setDescription('–í—Ä–µ–º—è –≤ –º–∏–Ω—É—Ç–∞—Ö').setRequired(true)),

  new SlashCommandBuilder().setName('unban').setDescription('–†–∞–∑–±–∞–Ω–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞')
    .addUserOption(opt => opt.setName('–Ω–∏–∫').setDescription('–£—á–∞—Å—Ç–Ω–∏–∫').setRequired(true)),

  new SlashCommandBuilder().setName('mute').setDescription('–ó–∞–º—å—é—Ç–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞')
    .addUserOption(opt => opt.setName('–Ω–∏–∫').setDescription('–£—á–∞—Å—Ç–Ω–∏–∫').setRequired(true))
    .addStringOption(opt => opt.setName('–ø—Ä–∏—á–∏–Ω–∞').setDescription('–ü—Ä–∏—á–∏–Ω–∞').setRequired(true))
    .addIntegerOption(opt => opt.setName('–≤—Ä–µ–º—è').setDescription('–í—Ä–µ–º—è –≤ –º–∏–Ω—É—Ç–∞—Ö').setRequired(true)),

  new SlashCommandBuilder().setName('unmute').setDescription('–†–∞–∑–º—å—é—Ç–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞')
    .addUserOption(opt => opt.setName('–Ω–∏–∫').setDescription('–£—á–∞—Å—Ç–Ω–∏–∫').setRequired(true)),

  new SlashCommandBuilder().setName('blist').setDescription('–î–æ–±–∞–≤–∏—Ç—å –≤ —á—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫')
    .addUserOption(opt => opt.setName('–Ω–∏–∫').setDescription('–£—á–∞—Å—Ç–Ω–∏–∫').setRequired(true))
    .addStringOption(opt => opt.setName('–ø—Ä–∏—á–∏–Ω–∞').setDescription('–ü—Ä–∏—á–∏–Ω–∞').setRequired(true)),

  new SlashCommandBuilder().setName('unblist').setDescription('–£–±—Ä–∞—Ç—å –∏–∑ —á—ë—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞')
    .addUserOption(opt => opt.setName('–Ω–∏–∫').setDescription('–£—á–∞—Å—Ç–Ω–∏–∫').setRequired(true)),

  new SlashCommandBuilder().setName('clearblist').setDescription('–û—á–∏—Å—Ç–∏—Ç—å —á—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫'),

  new SlashCommandBuilder().setName('showblist').setDescription('–ü–æ–∫–∞–∑–∞—Ç—å —á—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫'),

  new SlashCommandBuilder().setName('pred').setDescription('–í—ã–¥–∞—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ')
    .addUserOption(opt => opt.setName('–Ω–∏–∫').setDescription('–£—á–∞—Å—Ç–Ω–∏–∫').setRequired(true))
    .addStringOption(opt => opt.setName('–ø—Ä–∏—á–∏–Ω–∞').setDescription('–ü—Ä–∏—á–∏–Ω–∞').setRequired(true))
];

const rest = new REST({ version: '10' }).setToken(process.env.TOKEN);

client.once('ready', async () => {
  console.log(`‚úÖ Logged in as ${client.user.tag}`);
  await rest.put(Routes.applicationCommands(process.env.CLIENT_ID), { body: commands });
});

// –§—É–Ω–∫—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –∫–∞–Ω–∞–ª
async function log(guild, message) {
  const logChannel = guild.channels.cache.get(punishmentsChannelId);
  if (logChannel) await logChannel.send(message);
}

client.on('interactionCreate', async interaction => {
  if (!interaction.isChatInputCommand()) return;

  if (!interaction.member.permissions.has(PermissionsBitField.Flags.Administrator)) {
    return interaction.reply({ content: '‚ùå –£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.', ephemeral: true });
  }

  const command = interaction.commandName;
  const targetUser = interaction.options.getUser('–Ω–∏–∫');
  const reason = interaction.options.getString('–ø—Ä–∏—á–∏–Ω–∞');
  const duration = interaction.options.getInteger('–≤—Ä–µ–º—è');
  const guild = interaction.guild;
  if (!guild) return interaction.reply({ content: '–û—à–∏–±–∫–∞: –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.', ephemeral: true });
  const member = guild.members.cache.get(targetUser?.id);

  try {
    switch (command) {
      case 'ban': {
        if (!member) return interaction.reply({ content: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.', ephemeral: true });

        savedRoles.set(targetUser.id, member.roles.cache.map(r => r.id));
        await member.roles.set([]);
        bans.set(targetUser.id, Date.now() + duration * 60000);
        await interaction.reply({ content: `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${targetUser.tag} –∑–∞–±–∞–Ω–µ–Ω –Ω–∞ ${duration} –º–∏–Ω—É—Ç.`, ephemeral: true });
        await log(guild, `üî® –ë–∞–Ω: ${targetUser.tag} | –ü—Ä–∏—á–∏–Ω–∞: ${reason} | –í—Ä–µ–º—è: ${duration} –º–∏–Ω.`);
        break;
      }

      case 'unban': {
        if (!member) return interaction.reply({ content: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.', ephemeral: true });

        bans.delete(targetUser.id);
        if (savedRoles.has(targetUser.id)) {
          const roles = savedRoles.get(targetUser.id).filter(id => guild.roles.cache.has(id));
          await member.roles.set(roles);
          savedRoles.delete(targetUser.id);
        }
        await interaction.reply({ content: `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${targetUser.tag} —Ä–∞–∑–±–∞–Ω–µ–Ω.`, ephemeral: true });
        await log(guild, `‚úÖ –†–∞–∑–±–∞–Ω: ${targetUser.tag}`);
        break;
      }

      case 'mute': {
        if (!member) return interaction.reply({ content: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.', ephemeral: true });

        let muteRole = guild.roles.cache.find(r => r.name === 'Muted');
        if (!muteRole) {
          muteRole = await guild.roles.create({ name: 'Muted', permissions: [] });
          // –ú–æ–∂–Ω–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ —É–±—Ä–∞—Ç—å –ø—Ä–∞–≤–∞ –ø–∏—Å–∞—Ç—å –≤–æ –≤—Å–µ—Ö –∫–∞–Ω–∞–ª–∞—Ö, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        }
        await member.roles.add(muteRole);
        mutes.set(targetUser.id, Date.now() + duration * 60000);
        await interaction.reply({ content: `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${targetUser.tag} –∑–∞–º—å—é—á–µ–Ω –Ω–∞ ${duration} –º–∏–Ω—É—Ç.`, ephemeral: true });
        await log(guild, `üîá –ú—É—Ç: ${targetUser.tag} | –ü—Ä–∏—á–∏–Ω–∞: ${reason} | –í—Ä–µ–º—è: ${duration} –º–∏–Ω.`);
        break;
      }

      case 'unmute': {
        if (!member) return interaction.reply({ content: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.', ephemeral: true });

        const muteRole = guild.roles.cache.find(r => r.name === 'Muted');
        if (muteRole) await member.roles.remove(muteRole);
        mutes.delete(targetUser.id);
        await interaction.reply({ content: `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${targetUser.tag} —Ä–∞–∑–º—å—é—á–µ–Ω.`, ephemeral: true });
        await log(guild, `‚úÖ –†–∞–∑–º—å—é—Ç: ${targetUser.tag}`);
        break;
      }

      case 'blist': {
        if (!member) return interaction.reply({ content: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.', ephemeral: true });

        blacklist.add(targetUser.id);
        await interaction.reply({ content: `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${targetUser.tag} –¥–æ–±–∞–≤–ª–µ–Ω –≤ —á—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∏ –∫–∏–∫–Ω—É—Ç —Å —Å–µ—Ä–≤–µ—Ä–∞.`, ephemeral: true });
        await log(guild, `üö´ –ß–°: ${targetUser.tag} | –ü—Ä–∏—á–∏–Ω–∞: ${reason}`);

        try {
          await member.kick('–î–æ–±–∞–≤–ª–µ–Ω –≤ —á—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫');
        } catch (err) {
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–∏–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —á–µ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞:', err);
        }
        break;
      }

      case 'unblist': {
        blacklist.delete(targetUser.id);
        await interaction.reply({ content: `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${targetUser.tag} —É–¥–∞–ª—ë–Ω –∏–∑ —á—ë—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞.`, ephemeral: true });
        await log(guild, `‚úÖ –£–¥–∞–ª—ë–Ω –∏–∑ –ß–°: ${targetUser.tag}`);
        break;
      }

      case 'clearblist': {
        blacklist.clear();
        await interaction.reply({ content: '–ß—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ –æ—á–∏—â–µ–Ω.', ephemeral: true });
        await log(guild, `‚ôªÔ∏è –ß–° –æ—á–∏—â–µ–Ω.`);
        break;
      }

      case 'showblist': {
        const list = Array.from(blacklist).map(id => `<@${id}>`).join(', ') || '–ü—É—Å—Ç–æ';
        await interaction.reply({ content: `–ß—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫: ${list}`, ephemeral: true });
        break;
      }

      case 'pred': {
        if (!member) return interaction.reply({ content: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.', ephemeral: true });

        let count = (warnings.get(targetUser.id) || 0) + 1;
        warnings.set(targetUser.id, count);
        await interaction.reply({ content: `–í—ã–¥–∞–Ω–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ ${targetUser.tag} (${count}/${warningLimit}).`, ephemeral: true });
        await log(guild, `‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: ${targetUser.tag} | –ü—Ä–∏—á–∏–Ω–∞: ${reason} (${count}/${warningLimit})`);

        if (count === 3) {
          let muteRole = guild.roles.cache.find(r => r.name === 'Muted');
          if (!muteRole) muteRole = await guild.roles.create({ name: 'Muted', permissions: [] });
          await member.roles.add(muteRole);
          mutes.set(targetUser.id, Date.now() + 60 * 60000);
          await log(guild, `üîá –ê–≤—Ç–æ-–º—É—Ç –∑–∞ 3 –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è: ${targetUser.tag} (60 –º–∏–Ω)`);
        }

        if (count >= warningLimit) {
          // –ê–≤—Ç–æ-–±–∞–Ω –∏ –æ–±–Ω—É–ª–µ–Ω–∏–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π
          savedRoles.set(targetUser.id, member.roles.cache.map(r => r.id));
          await member.roles.set([]);
          bans.set(targetUser.id, Date.now() + 60 * 60000);
          warnings.set(targetUser.id, 0); // —Å–±—Ä–æ—Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π –ø–æ—Å–ª–µ –±–∞–Ω–∞
          await log(guild, `üî® –ê–≤—Ç–æ-–±–∞–Ω –∑–∞ ${warningLimit} –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: ${targetUser.tag} (60 –º–∏–Ω)`);
        }

        break;
      }
    }
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã:', err);
    if (interaction.replied || interaction.deferred) {
      await interaction.followUp({ content: '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.', ephemeral: true });
    } else {
      await interaction.reply({ content: '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.', ephemeral: true });
    }
  }
});

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –±–∞–Ω–æ–≤ –∏ –º—É—Ç–æ–≤
client.on('messageCreate', async message => {
  if (message.author.bot) return;
  if (bans.has(message.author.id)) {
    const remaining = bans.get(message.author.id) - Date.now();
    if (remaining > 0) {
      await message.delete();
      return message.author.send(`‚õî –í—ã –∑–∞–±–∞–Ω–µ–Ω—ã –¥–æ ${new Date(Date.now() + remaining).toLocaleTimeString()}`).catch(() => {});
    } else {
      bans.delete(message.author.id);
    }
  }
  if (mutes.has(message.author.id)) {
    const remaining = mutes.get(message.author.id) - Date.now();
    if (remaining > 0) {
      await message.delete();
      return message.author.send(`üîá –í—ã –∑–∞–º—å—é—á–µ–Ω—ã –¥–æ ${new Date(Date.now() + remaining).toLocaleTimeString()}`).catch(() => {});
    } else {
      mutes.delete(message.author.id);
    }
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ‚Äî –∫–∏–∫–∞–µ–º, –µ—Å–ª–∏ –æ–Ω –≤ —á–µ—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ
client.on('guildMemberAdd', async member => {
  if (blacklist.has(member.id)) {
    try {
      await member.send('‚ùå –í—ã –≤ —á—ë—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ —ç—Ç–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞, –¥–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.');
    } catch {}
    await member.kick('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —á—ë—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ');
  }
});

client.login(process.env.TOKEN);
